Service Vault - Current Development Context
===========================================

## Current Session Status

### Active Task: Domain-Based User Assignment Implementation
- Task ID: #67 in todo list (in progress)
- Goal: Implement automatic user assignment to accounts based on email domains using CSV domains field on Account table

### Recent Progress (This Session)

#### 1. Email Service Schema Fix
**Issue**: EmailService was trying to use non-existent `isActive` field on EmailSettings model
**Fix**: Updated EmailService.ts to use key-value approach with proper schema
- Changed from single findFirst with isActive filter to findMany with key filtering
- Updated settings mapping to work with key-value pairs
- Fixed field references to use proper settingsMap format

#### 2. Domain Assignment Service Implementation
**Created**: `/src/lib/users/domainAssignmentService.ts`
**Features**:
- Email domain extraction and CSV parsing utilities
- Account domain matching with hierarchical inheritance
- Automatic user assignment with default role assignment
- Batch processing capabilities
- Unassigned user detection
- Domain validation and conflict detection

**Key Functions**:
- `findMatchingAccounts(email: string)` - Find accounts matching email domain
- `assignUserByDomain(userId: string, email: string)` - Assign single user
- `batchAssignUsersByDomain()` - Process multiple users
- `findUnassignedDomainUsers()` - Find users that could be auto-assigned
- `validateAccountDomains()` - Check domain configuration

#### 3. Domain Assignment API Endpoint
**Created**: `/src/app/api/users/domain-assignment/route.ts`
**Endpoints**:
- GET `?action=find-unassigned` - Find users that could be assigned
- POST `action=assign-single` - Assign individual user
- POST `action=assign-batch` - Process multiple users
- POST `action=assign-all-unassigned` - Auto-assign all eligible users

### Database Schema Context

#### Account Table Structure
```prisma
model Account {
  id          String      @id @default(cuid())
  name        String
  accountType AccountType @default(INDIVIDUAL)
  parentId    String?
  domains     String?     // CSV of email domains for auto-assignment
  // ... other fields
}
```

#### User/Membership Structure (Current)
- User table: Core user authentication data
- AccountMembership table: Links users to accounts with roles
- Role-based permissions through MembershipRole junction table

#### Migration Status
- ✅ Core permission system migrated from RBAC to ABAC
- ✅ Database migrated from SQLite to PostgreSQL
- ⚠️ Some API endpoints still use old AccountUser model (need migration)
- ✅ Frontend pages updated for new permission system

### Outstanding Issues

#### 1. Legacy API Endpoints
Several endpoints still use deprecated AccountUser model:
- `/api/account-users/create-manual/route.ts`
- `/api/account-users/invite/route.ts`
- `/api/account-users/[id]/route.ts`

Need to migrate these to use User/AccountMembership pattern.

#### 2. Integration Points for Domain Assignment
Next steps for domain assignment implementation:
1. Integrate domain assignment into user creation workflows
2. Add domain assignment to invitation acceptance process
3. Create UI for managing account domains
4. Add domain assignment management interface
5. Implement background job for processing existing users

### Technical Architecture

#### Permission System (ABAC)
- **Service**: `PermissionService` in `/src/lib/permissions/PermissionService.ts`
- **Hook**: `usePermissions` for frontend permission checks
- **Pattern**: Resource-Action-Context based permissions
- **Format**: `{userId, resource, action, accountId?}`

#### Billing System
- **Service**: `billingRateService` with account override logic
- **Inheritance**: Account Override > Parent Override > System Default
- **Integration**: Time entry creation uses effective rates with snapshots

#### Account Hierarchy
- **Structure**: Parent-Child relationships with type enforcement
- **Types**: INDIVIDUAL, ORGANIZATION, SUBSIDIARY
- **Business Rules**: Complex validation for parent-child assignments

### Current Development Priorities

#### High Priority (In Progress)
1. **Domain-Based User Assignment** - Currently implementing
2. **Legacy API Migration** - AccountUser to User/AccountMembership

#### Medium Priority (Pending)
1. Additional caching and performance optimizations
2. File overviews for created/edited files
3. Complete remaining API endpoint migrations

#### Completed Recently
- Role template management system with super-admin controls
- Account billing rate override logic with parent inheritance
- Comprehensive account management with parent assignment
- Account type changes and rename functionality
- Permission service format standardization
- Next.js 15 async params migration
- Documentation updates and change tracking

### File Structure Context

#### Core Services
- `/src/lib/permissions/PermissionService.ts` - ABAC permission system
- `/src/lib/billing/billingRateService.ts` - Billing rate logic with inheritance
- `/src/lib/users/domainAssignmentService.ts` - Domain-based user assignment (NEW)
- `/src/lib/email/EmailService.ts` - Email service (recently fixed)

#### Key Components
- `/src/components/accounts/AssignParentDialog.tsx` - Account management dialog
- `/src/components/billing/BillingRateSelector.tsx` - Rate selection with overrides
- `/src/hooks/usePermissions.ts` - Frontend permission hooks

#### API Structure
- `/src/app/api/accounts/[id]/billing-rates/route.ts` - Account billing rates
- `/src/app/api/users/domain-assignment/route.ts` - Domain assignment API (NEW)
- Various other API endpoints in migration process

### Documentation Status
- ✅ Comprehensive documentation in `/docs/` with organized structure
- ✅ Index maintained at `/docs/index.md` with maintenance requirements
- ✅ Change tracking document at `/docs/development/change-tracking.md`
- ✅ Feature documentation for accounts, billing, time entries
- ✅ Component documentation for selectors and UI patterns
- ✅ System documentation for permissions, deployment, etc.

### Next Immediate Steps
1. Complete domain assignment integration into user creation workflows
2. Migrate remaining AccountUser API endpoints to new schema
3. Add UI for domain management in account settings
4. Test domain assignment functionality end-to-end
5. Update documentation with domain assignment features

### Technical Debt
- Legacy AccountUser model usage in several API endpoints
- Some permission service format inconsistencies
- Email service needs better error handling and configuration validation
- Performance optimizations needed for large datasets

### Configuration Context
- **Framework**: Next.js 15 with App Router
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: NextAuth with custom role system
- **UI**: Shadcn/UI components with Tailwind CSS
- **Email**: Nodemailer with database-backed configuration

This context represents the current state of development as of the domain assignment implementation task in progress.