generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String?             @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  preferences           Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  memberships           AccountMembership[]
  authAccounts          AuthAccount[]
  createdEmails         EmailQueue[]
  createdEmailTemplates EmailTemplate[]     @relation("EmailTemplateCreator")
  updatedEmailTemplates EmailTemplate[]     @relation("EmailTemplateUpdater")
  createdInvoices       Invoice[]
  sessions              Session[]
  systemRoles           SystemRole[]
  assignedTickets       Ticket[]            @relation("TicketAssignee")
  createdTickets        Ticket[]            @relation("TicketCreator")
  approvedTimeEntries   TimeEntry[]         @relation("TimeEntryApprover")
  timeEntries           TimeEntry[]
  timers                Timer[]

  @@index([email])
}

model Account {
  id           String               @id @default(cuid())
  name         String
  accountType  AccountType          @default(INDIVIDUAL)
  parentId     String?
  companyName  String?
  address      String?
  phone        String?
  domains      String?              // Legacy field - now use DomainMapping for email routing
  customFields Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  parent       Account?             @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]            @relation("AccountHierarchy")
  billingRates AccountBillingRate[]
  memberships  AccountMembership[]
  settings     AccountSettings?
  invoices     Invoice[]
  tickets      Ticket[]
  timeEntries  TimeEntry[]
  domainMappings DomainMapping[]     // Email domains mapped to this account

  @@index([parentId])
  @@index([domains])
}

model AccountMembership {
  id            String   @id @default(cuid())
  userId        String
  accountId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles         MembershipRole[]
  assignedTickets Ticket[] @relation("TicketAssignedAccountUser")

  @@unique([userId, accountId])
  @@index([userId])
  @@index([accountId])
}

model RoleTemplate {
  id                    String           @id @default(cuid())
  name                  String           @unique
  description           String?
  permissions           String[]
  inheritAllPermissions Boolean          @default(false)
  isSystemRole          Boolean          @default(false)
  scope                 String           @default("account")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  membershipRoles       MembershipRole[]
  systemRoles           SystemRole[]

  @@index([isSystemRole])
  @@index([inheritAllPermissions])
}

model MembershipRole {
  id           String            @id @default(cuid())
  membershipId String
  roleId       String
  membership   AccountMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  role         RoleTemplate      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([membershipId, roleId])
}

model SystemRole {
  id     String       @id @default(cuid())
  userId String
  roleId String
  role   RoleTemplate @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Ticket {
  // Primary identification
  id                   String             @id @default(cuid())
  ticketNumber         String             @unique // Auto-generated unique ticket number (e.g., ACME-2025-0001) - format defined by system settings
  title                String             // Ticket subject/title
  description          String?            // Detailed description of the issue or request
  
  // Status and priority
  status               String             @default("OPEN")   // Current status (OPEN, IN_PROGRESS, RESOLVED, CLOSED, etc.)
  priority             String             @default("MEDIUM") // Priority level (LOW, MEDIUM, HIGH, CRITICAL)
  
  // Metadata
  customFields         Json?              // Flexible storage for custom ticket fields
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Relationships - Core assignment structure
  accountId            String             // Which account this ticket belongs to
  creatorId            String?            // Who created this ticket (internal staff)
  assigneeId           String?            // Who is assigned to work on this ticket (agent/employee with tickets:assignable-to permission)
  assignedAccountUserId String?           // Which account user this ticket is created FOR (customer with tickets:assignable-for permission)
  
  // Relations
  account              Account            @relation(fields: [accountId], references: [id])
  assignee             User?              @relation("TicketAssignee", fields: [assigneeId], references: [id])      // The agent working on it
  creator              User?              @relation("TicketCreator", fields: [creatorId], references: [id])        // Who created it
  assignedAccountUser  AccountMembership? @relation("TicketAssignedAccountUser", fields: [assignedAccountUserId], references: [id]) // Customer it's for
  
  // Associated data
  addons               TicketAddon[]      // Additional charges/items for this ticket
  timeEntries          TimeEntry[]        // Time logged against this ticket
  timers               Timer[]            // Active timers for this ticket
  emailMessages        EmailMessage[]     // Email messages related to this ticket

  @@index([accountId])
  @@index([creatorId])
  @@index([assigneeId])
  @@index([assignedAccountUserId])
  @@index([status])
}

model TimeEntry {
  id               String        @id @default(cuid())
  description      String?
  minutes          Int
  date             DateTime      @default(now())
  noCharge         Boolean       @default(false)
  billingRateId    String?
  billingRateName  String?
  billingRateValue Float?
  isApproved       Boolean       @default(false)
  approvedBy       String?
  approvedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  ticketId         String?
  accountId        String?
  userId           String
  invoiceItems     InvoiceItem[]
  account          Account?      @relation(fields: [accountId], references: [id])
  approver         User?         @relation("TimeEntryApprover", fields: [approvedBy], references: [id])
  billingRate      BillingRate?  @relation(fields: [billingRateId], references: [id])
  ticket           Ticket?       @relation(fields: [ticketId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([ticketId])
  @@index([accountId])
  @@index([date])
  @@index([isApproved])
}

model TicketAddon {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Float
  quantity     Int           @default(1)
  ticketId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  ticket       Ticket        @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  status        String        @default("DRAFT")
  total         Float
  issueDate     DateTime      @default(now())
  dueDate       DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accountId     String
  creatorId     String
  account       Account       @relation(fields: [accountId], references: [id])
  creator       User          @relation(fields: [creatorId], references: [id])
  items         InvoiceItem[]

  @@index([accountId])
  @@index([status])
}

model InvoiceItem {
  id          String       @id @default(cuid())
  description String
  quantity    Float
  rate        Float
  amount      Float
  invoiceId   String
  timeEntryId String?
  addonId     String?
  addon       TicketAddon? @relation(fields: [addonId], references: [id])
  invoice     Invoice      @relation(fields: [invoiceId], references: [id])
  timeEntry   TimeEntry?   @relation(fields: [timeEntryId], references: [id])

  @@index([invoiceId])
}

model BillingRate {
  id           String               @id @default(cuid())
  name         String               @unique
  rate         Float
  description  String?
  isDefault    Boolean              @default(false)
  isEnabled    Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  accountRates AccountBillingRate[]
  timeEntries  TimeEntry[]
}

model AccountBillingRate {
  id            String      @id @default(cuid())
  accountId     String
  billingRateId String
  rate          Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  account       Account     @relation(fields: [accountId], references: [id])
  billingRate   BillingRate @relation(fields: [billingRateId], references: [id])

  @@unique([accountId, billingRateId])
}

model SystemSettings {
  id           String   @id @default(cuid())
  key          String   @unique
  value        String
  customFields Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AccountSettings {
  id           String   @id @default(cuid())
  accountId    String   @unique
  customFields Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  account      Account  @relation(fields: [accountId], references: [id])
}

model Timer {
  id         String   @id @default(cuid())
  userId     String
  ticketId   String
  startTime  DateTime @default(now())
  pausedTime Int      @default(0)
  isRunning  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, ticketId])
}

model EmailTemplate {
  id         String              @id @default(cuid())
  name       String              @unique
  type       EmailTemplateType
  subject    String
  htmlBody   String
  textBody   String?
  variables  String              @default("{}")
  isDefault  Boolean             @default(false)
  status     EmailTemplateStatus @default(ACTIVE)
  createdBy  String
  updatedBy  String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  emailQueue EmailQueue[]
  creator    User                @relation("EmailTemplateCreator", fields: [createdBy], references: [id])
  updater    User?               @relation("EmailTemplateUpdater", fields: [updatedBy], references: [id])
}


model EmailQueue {
  id            String           @id @default(cuid())
  templateId    String?
  fromEmail     String
  fromName      String?
  toEmail       String
  toName        String?
  ccEmails      String?
  bccEmails     String?
  subject       String
  htmlBody      String
  textBody      String?
  variables     String           @default("{}")
  status        EmailQueueStatus @default(PENDING)
  priority      Int              @default(5)
  scheduledAt   DateTime?
  sentAt        DateTime?
  failureReason String?
  retryCount    Int              @default(0)
  maxRetries    Int              @default(3)
  createdBy     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  creator       User?            @relation(fields: [createdBy], references: [id])
  template      EmailTemplate?   @relation(fields: [templateId], references: [id])

  @@index([status])
  @@index([scheduledAt])
}

model UserPreferences {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

enum AccountType {
  INDIVIDUAL
  ORGANIZATION
  SUBSIDIARY
}

enum EmailTemplateType {
  USER_INVITATION
  TICKET_UPDATE
  TICKET_STATUS_CHANGE
  TIME_ENTRY_APPROVAL
  INVOICE_GENERATED
  PASSWORD_RESET
  ACCOUNT_WELCOME
  SYSTEM_NOTIFICATION
  EMAIL_TICKET_CREATED
  EMAIL_TICKET_REPLY
  EMAIL_SECURITY_ALERT
  EMAIL_QUARANTINE_NOTIFICATION
  EMAIL_INTEGRATION_ERROR
  EMAIL_INTEGRATION_SUCCESS
  EMAIL_AUTO_RESPONSE
  EMAIL_DELIVERY_CONFIRMATION
}

enum EmailTemplateStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum EmailQueueStatus {
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
}

// Import System Models - Enhanced for multi-stage imports
model ImportConfiguration {
  id                String   @id @default(cuid())
  name              String
  description       String?
  sourceType        ImportSourceType
  connectionConfig  Json     // Database connection details, file settings, etc.
  sourceTableConfig Json     // Selected source tables/sheets with their configurations
  isMultiStage      Boolean  @default(false)  // Whether this is a multi-stage import
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String   // Store user ID as string, no FK constraint
  stages            ImportStage[]
  executions        ImportExecution[]

  @@index([createdBy])
  @@index([isMultiStage])
  @@map("import_configurations")
}

model ImportStage {
  id                String              @id @default(cuid())
  configurationId   String
  configuration     ImportConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  order             Int                 // Stage execution order (1, 2, 3...)
  name              String              // Stage name (e.g., "Import Accounts", "Import Users")
  description       String?
  sourceTable       String              // Source table/sheet name
  targetEntity      String              // Target entity name (Account, User, etc.)
  fieldMappings     Json                // Array of field mapping configurations
  fieldOverrides    Json                // Field exclusions and custom overrides
  dependsOnStages   String[]            // Array of stage IDs this stage depends on
  crossStageMapping Json                // How to link to records from previous stages
  validationRules   Json                // Custom validation rules for this stage
  transformRules    Json                // Data transformation rules for this stage
  isEnabled         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  executions        ImportStageExecution[]

  @@index([configurationId])
  @@index([order])
  @@index([targetEntity])
  @@map("import_stages")
}

model ImportExecution {
  id                  String              @id @default(cuid())
  configurationId     String
  configuration       ImportConfiguration @relation(fields: [configurationId], references: [id])
  status              ImportStatus        @default(PENDING)
  currentStage        Int                 @default(1)     // Current executing stage number
  totalStages         Int                 @default(1)     // Total number of stages
  totalRecords        Int                 @default(0)
  processedRecords    Int                 @default(0)
  successfulRecords   Int                 @default(0)
  failedRecords       Int                 @default(0)
  errors              Json                // Array of error details
  warnings            Json                // Array of warning messages
  resultSummary       Json                // Summary of import results
  startedAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  executedBy          String              // Store user ID as string, no FK constraint
  stageExecutions     ImportStageExecution[]
  logs                ImportExecutionLog[]

  @@index([configurationId])
  @@index([executedBy])
  @@index([status])
  @@map("import_executions")
}

model ImportStageExecution {
  id                  String          @id @default(cuid())
  executionId         String
  execution           ImportExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  stageId             String
  stage               ImportStage     @relation(fields: [stageId], references: [id])
  order               Int             // Stage order within this execution
  status              ImportStatus    @default(PENDING)
  sourceTable         String          // Source table/sheet being processed
  targetEntity        String          // Target entity being created
  totalRecords        Int             @default(0)
  processedRecords    Int             @default(0)
  successfulRecords   Int             @default(0)
  failedRecords       Int             @default(0)
  skippedRecords      Int             @default(0)
  createdEntityIds    Json            // IDs of created entities for cross-stage referencing
  errors              Json            // Stage-specific errors
  warnings            Json            // Stage-specific warnings
  startedAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([executionId])
  @@index([stageId])
  @@index([status])
  @@index([order])
  @@map("import_stage_executions")
}

model ImportExecutionLog {
  id          String          @id @default(cuid())
  executionId String
  execution   ImportExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  level       LogLevel
  message     String
  details     Json?
  recordIndex Int?            // Which record this log refers to
  timestamp   DateTime        @default(now())

  @@index([executionId])
  @@index([level])
  @@map("import_execution_logs")
}

enum ImportSourceType {
  DATABASE_MYSQL
  DATABASE_POSTGRESQL
  DATABASE_SQLITE
  DATABASE_MONGODB
  FILE_CSV
  FILE_EXCEL
  FILE_JSON
  API_REST
  API_GRAPHQL
}

enum ImportStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}

// Email Integration Models - Global Configuration
model EmailIntegration {
  id              String                @id @default(cuid())
  name            String                // Human-readable name for the integration
  provider        EmailProvider
  providerConfig  Json                  // OAuth credentials, server settings, etc.
  isActive        Boolean               @default(true)
  lastSyncAt      DateTime?
  syncInterval    Int                   @default(300) // Sync interval in seconds (5 minutes default)
  processingRules Json?                 // Rules for ticket creation, assignment, etc.
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  emailMessages   EmailMessage[]
  
  @@index([provider])
  @@index([isActive])
  @@index([name])
}

// Domain to Account mapping for email routing
model DomainMapping {
  id        String   @id @default(cuid())
  domain    String   @unique              // Email domain (e.g., "company.com", "support.company.com")
  accountId String                        // Target account for this domain
  priority  Int      @default(0)          // Higher priority = more specific match (subdomain > domain)
  isActive  Boolean  @default(true)       // Enable/disable domain mapping
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@index([domain])
  @@index([accountId])
  @@index([priority])
  @@index([isActive])
  @@map("domain_mappings")
}

model EmailMessage {
  id              String              @id @default(cuid())
  integrationId   String
  messageId       String              @unique // RFC Message-ID header
  threadId        String?             // For threading conversations
  inReplyTo       String?             // In-Reply-To header for threading
  ticketId        String?
  fromEmail       String
  fromName        String?
  toEmail         String
  toName          String?
  ccEmails        String?             // Comma-separated
  bccEmails       String?             // Comma-separated
  subject         String
  textBody        String?
  htmlBody        String?
  headers         Json?               // Full email headers
  status          EmailMessageStatus  @default(PENDING)
  priority        Int                 @default(5)
  securityScore   Float?              // Spam/security scoring (0-100)
  processedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  integration     EmailIntegration    @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  ticket          Ticket?             @relation(fields: [ticketId], references: [id])
  attachments     EmailAttachment[]
  thread          EmailMessage?       @relation("EmailThread", fields: [threadId], references: [messageId])
  replies         EmailMessage[]      @relation("EmailThread")
  
  @@index([messageId])
  @@index([threadId])
  @@index([ticketId])
  @@index([integrationId])
  @@index([fromEmail])
  @@index([status])
  @@index([createdAt])
}

model EmailAttachment {
  id              String       @id @default(cuid())
  emailId         String
  filename        String
  contentType     String
  size            Int
  contentId       String?      // For inline attachments
  content         Bytes?       // For small attachments (< 1MB)
  storagePath     String?      // File path for large attachments
  securityStatus  AttachmentSecurityStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  
  email           EmailMessage @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  @@index([emailId])
  @@index([securityStatus])
}

model EmailProcessingLog {
  id              String       @id @default(cuid())
  integrationId   String
  messageId       String?      // Reference to EmailMessage if created
  action          String       // SYNC, PARSE, CREATE_TICKET, SECURITY_SCAN, etc.
  status          String       // SUCCESS, FAILED, SKIPPED
  details         Json?        // Additional processing details
  errorMessage    String?
  processingTime  Int?         // Processing time in milliseconds
  createdAt       DateTime     @default(now())
  
  @@index([integrationId])
  @@index([messageId])
  @@index([action])
  @@index([status])
  @@index([createdAt])
}

enum EmailProvider {
  MICROSOFT_GRAPH
  GMAIL
  GENERIC_IMAP
  GENERIC_POP3
}

enum EmailMessageStatus {
  PENDING         // Just received, not processed
  PROCESSING      // Currently being processed
  PROCESSED       // Successfully processed
  FAILED          // Processing failed
  QUARANTINED     // Flagged as spam/malicious
  IGNORED         // Marked to ignore (auto-replies, etc.)
}

enum AttachmentSecurityStatus {
  PENDING         // Not scanned yet
  SAFE            // Passed security scan
  SUSPICIOUS      // Flagged as potentially dangerous
  BLOCKED         // Blocked due to security policy
}

// Email Audit Models
model EmailAuditLog {
  id                String              @id @default(cuid())
  eventType         EmailAuditEventType
  entityType        String              // EmailIntegration, EmailMessage, EmailAttachment, etc.
  entityId          String              // ID of the affected entity
  userId            String?             // User who performed the action (null for system actions)
  sessionId         String?             // Session ID for correlation
  action            String              // Specific action performed
  description       String?             // Human-readable description
  previousValues    Json?               // Previous state before change (for updates)
  newValues         Json?               // New state after change (for updates)
  metadata          Json?               // Additional context and details
  ipAddress         String?             // IP address of the request
  userAgent         String?             // User agent string
  accountId         String?             // Associated account ID
  integrationId     String?             // Associated integration ID
  messageId         String?             // Associated message ID
  success           Boolean             @default(true)
  errorMessage      String?             // Error details if action failed
  processingTime    Int?                // Time taken to process (milliseconds)
  timestamp         DateTime            @default(now())
  
  @@index([eventType])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([accountId])
  @@index([integrationId])
  @@index([messageId])
  @@index([timestamp])
  @@index([success])
  @@map("email_audit_logs")
}

model EmailAccessLog {
  id              String   @id @default(cuid())
  userId          String
  action          String   // VIEW, DOWNLOAD, EXPORT, SEARCH, etc.
  resourceType    String   // INTEGRATION, MESSAGE, ATTACHMENT, QUARANTINE, etc.
  resourceId      String?  // ID of the accessed resource
  accountId       String?  // Account context
  integrationId   String?  // Integration context
  searchQuery     String?  // For search actions
  resultCount     Int?     // Number of results returned
  filters         Json?    // Applied filters
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  success         Boolean  @default(true)
  errorMessage    String?
  responseTime    Int?     // Response time in milliseconds
  timestamp       DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([resourceId])
  @@index([accountId])
  @@index([integrationId])
  @@index([timestamp])
  @@index([success])
  @@map("email_access_logs")
}

model EmailSecurityLog {
  id                String   @id @default(cuid())
  integrationId     String?
  messageId         String?
  attachmentId      String?
  threatType        String   // SPAM, PHISHING, MALWARE, SUSPICIOUS_ATTACHMENT, etc.
  riskLevel         String   // LOW, MEDIUM, HIGH, CRITICAL
  securityScore     Float?   // 0-100 security score
  action            String   // ALLOW, QUARANTINE, BLOCK, DELETE
  reason            String?  // Reason for the action
  scanEngine        String?  // Which scanner detected the threat
  scanResults       Json?    // Detailed scan results
  falsePositive     Boolean  @default(false)
  reviewedBy        String?  // User who reviewed the alert
  reviewedAt        DateTime?
  reviewNotes       String?
  notificationsSent Json?    // Who was notified about this event
  timestamp         DateTime @default(now())
  
  @@index([integrationId])
  @@index([messageId])
  @@index([attachmentId])
  @@index([threatType])
  @@index([riskLevel])
  @@index([action])
  @@index([timestamp])
  @@index([falsePositive])
  @@map("email_security_logs")
}

enum EmailAuditEventType {
  INTEGRATION_CREATED
  INTEGRATION_UPDATED
  INTEGRATION_DELETED
  INTEGRATION_ACTIVATED
  INTEGRATION_DEACTIVATED
  OAUTH_TOKEN_REFRESHED
  OAUTH_TOKEN_EXPIRED
  SYNC_STARTED
  SYNC_COMPLETED
  SYNC_FAILED
  MESSAGE_RECEIVED
  MESSAGE_PROCESSED
  MESSAGE_QUARANTINED
  MESSAGE_RELEASED
  MESSAGE_DELETED
  TICKET_CREATED
  TICKET_UPDATED
  ATTACHMENT_SCANNED
  ATTACHMENT_BLOCKED
  SECURITY_ALERT_GENERATED
  CONFIGURATION_CHANGED
  PERMISSION_GRANTED
  PERMISSION_REVOKED
  BULK_ACTION_PERFORMED
  EXPORT_PERFORMED
  BACKUP_CREATED
  SYSTEM_ERROR
}
